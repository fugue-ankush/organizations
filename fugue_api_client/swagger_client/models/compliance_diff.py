# coding: utf-8

"""
    Fugue API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 0.0.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from swagger_client.models.compliance_diff_rules import ComplianceDiffRules  # noqa: F401,E501


class ComplianceDiff(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'rules': 'list[ComplianceDiffRules]',
        'old_state': 'str',
        'new_state': 'str',
        'resource_id': 'str',
        'resource_type': 'str'
    }

    attribute_map = {
        'rules': 'rules',
        'old_state': 'old_state',
        'new_state': 'new_state',
        'resource_id': 'resource_id',
        'resource_type': 'resource_type'
    }

    def __init__(self, rules=None, old_state=None, new_state=None, resource_id=None, resource_type=None):  # noqa: E501
        """ComplianceDiff - a model defined in Swagger"""  # noqa: E501

        self._rules = None
        self._old_state = None
        self._new_state = None
        self._resource_id = None
        self._resource_type = None
        self.discriminator = None

        if rules is not None:
            self.rules = rules
        if old_state is not None:
            self.old_state = old_state
        if new_state is not None:
            self.new_state = new_state
        if resource_id is not None:
            self.resource_id = resource_id
        if resource_type is not None:
            self.resource_type = resource_type

    @property
    def rules(self):
        """Gets the rules of this ComplianceDiff.  # noqa: E501

        List of rule evaluations that changed state after an event.  # noqa: E501

        :return: The rules of this ComplianceDiff.  # noqa: E501
        :rtype: list[ComplianceDiffRules]
        """
        return self._rules

    @rules.setter
    def rules(self, rules):
        """Sets the rules of this ComplianceDiff.

        List of rule evaluations that changed state after an event.  # noqa: E501

        :param rules: The rules of this ComplianceDiff.  # noqa: E501
        :type: list[ComplianceDiffRules]
        """

        self._rules = rules

    @property
    def old_state(self):
        """Gets the old_state of this ComplianceDiff.  # noqa: E501

        The resource's compliance state before an event.  # noqa: E501

        :return: The old_state of this ComplianceDiff.  # noqa: E501
        :rtype: str
        """
        return self._old_state

    @old_state.setter
    def old_state(self, old_state):
        """Sets the old_state of this ComplianceDiff.

        The resource's compliance state before an event.  # noqa: E501

        :param old_state: The old_state of this ComplianceDiff.  # noqa: E501
        :type: str
        """

        self._old_state = old_state

    @property
    def new_state(self):
        """Gets the new_state of this ComplianceDiff.  # noqa: E501

        The resource's compliance state after an event.  # noqa: E501

        :return: The new_state of this ComplianceDiff.  # noqa: E501
        :rtype: str
        """
        return self._new_state

    @new_state.setter
    def new_state(self, new_state):
        """Sets the new_state of this ComplianceDiff.

        The resource's compliance state after an event.  # noqa: E501

        :param new_state: The new_state of this ComplianceDiff.  # noqa: E501
        :type: str
        """

        self._new_state = new_state

    @property
    def resource_id(self):
        """Gets the resource_id of this ComplianceDiff.  # noqa: E501

        ID of the resource given by the provider.  # noqa: E501

        :return: The resource_id of this ComplianceDiff.  # noqa: E501
        :rtype: str
        """
        return self._resource_id

    @resource_id.setter
    def resource_id(self, resource_id):
        """Sets the resource_id of this ComplianceDiff.

        ID of the resource given by the provider.  # noqa: E501

        :param resource_id: The resource_id of this ComplianceDiff.  # noqa: E501
        :type: str
        """

        self._resource_id = resource_id

    @property
    def resource_type(self):
        """Gets the resource_type of this ComplianceDiff.  # noqa: E501

        Resource type.  # noqa: E501

        :return: The resource_type of this ComplianceDiff.  # noqa: E501
        :rtype: str
        """
        return self._resource_type

    @resource_type.setter
    def resource_type(self, resource_type):
        """Sets the resource_type of this ComplianceDiff.

        Resource type.  # noqa: E501

        :param resource_type: The resource_type of this ComplianceDiff.  # noqa: E501
        :type: str
        """

        self._resource_type = resource_type

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ComplianceDiff):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
