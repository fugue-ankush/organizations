# coding: utf-8

"""
    Fugue API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 0.0.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from swagger_client.models.compliance_diff import ComplianceDiff  # noqa: F401,E501
from swagger_client.models.resource_diff import ResourceDiff  # noqa: F401,E501


class Event(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'event_type': 'str',
        'created_at': 'int',
        'error': 'str',
        'resource_diff': 'ResourceDiff',
        'compliance_diff': 'ComplianceDiff'
    }

    attribute_map = {
        'id': 'id',
        'event_type': 'event_type',
        'created_at': 'created_at',
        'error': 'error',
        'resource_diff': 'resource_diff',
        'compliance_diff': 'compliance_diff'
    }

    def __init__(self, id=None, event_type=None, created_at=None, error=None, resource_diff=None, compliance_diff=None):  # noqa: E501
        """Event - a model defined in Swagger"""  # noqa: E501

        self._id = None
        self._event_type = None
        self._created_at = None
        self._error = None
        self._resource_diff = None
        self._compliance_diff = None
        self.discriminator = None

        if id is not None:
            self.id = id
        if event_type is not None:
            self.event_type = event_type
        if created_at is not None:
            self.created_at = created_at
        if error is not None:
            self.error = error
        if resource_diff is not None:
            self.resource_diff = resource_diff
        if compliance_diff is not None:
            self.compliance_diff = compliance_diff

    @property
    def id(self):
        """Gets the id of this Event.  # noqa: E501

        ID of event  # noqa: E501

        :return: The id of this Event.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this Event.

        ID of event  # noqa: E501

        :param id: The id of this Event.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def event_type(self):
        """Gets the event_type of this Event.  # noqa: E501

        Type of event - drift, remediation, or compliance.  # noqa: E501

        :return: The event_type of this Event.  # noqa: E501
        :rtype: str
        """
        return self._event_type

    @event_type.setter
    def event_type(self, event_type):
        """Sets the event_type of this Event.

        Type of event - drift, remediation, or compliance.  # noqa: E501

        :param event_type: The event_type of this Event.  # noqa: E501
        :type: str
        """
        allowed_values = ["DRIFT", "REMEDIATION", "COMPLIANCE"]  # noqa: E501
        if event_type not in allowed_values:
            raise ValueError(
                "Invalid value for `event_type` ({0}), must be one of {1}"  # noqa: E501
                .format(event_type, allowed_values)
            )

        self._event_type = event_type

    @property
    def created_at(self):
        """Gets the created_at of this Event.  # noqa: E501

        Time the event occurred.  # noqa: E501

        :return: The created_at of this Event.  # noqa: E501
        :rtype: int
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this Event.

        Time the event occurred.  # noqa: E501

        :param created_at: The created_at of this Event.  # noqa: E501
        :type: int
        """

        self._created_at = created_at

    @property
    def error(self):
        """Gets the error of this Event.  # noqa: E501

        Error message.  # noqa: E501

        :return: The error of this Event.  # noqa: E501
        :rtype: str
        """
        return self._error

    @error.setter
    def error(self, error):
        """Sets the error of this Event.

        Error message.  # noqa: E501

        :param error: The error of this Event.  # noqa: E501
        :type: str
        """

        self._error = error

    @property
    def resource_diff(self):
        """Gets the resource_diff of this Event.  # noqa: E501

        Difference between the old and new state of the resource.  # noqa: E501

        :return: The resource_diff of this Event.  # noqa: E501
        :rtype: ResourceDiff
        """
        return self._resource_diff

    @resource_diff.setter
    def resource_diff(self, resource_diff):
        """Sets the resource_diff of this Event.

        Difference between the old and new state of the resource.  # noqa: E501

        :param resource_diff: The resource_diff of this Event.  # noqa: E501
        :type: ResourceDiff
        """

        self._resource_diff = resource_diff

    @property
    def compliance_diff(self):
        """Gets the compliance_diff of this Event.  # noqa: E501

        Difference between the old and new compliance state of the resource.  # noqa: E501

        :return: The compliance_diff of this Event.  # noqa: E501
        :rtype: ComplianceDiff
        """
        return self._compliance_diff

    @compliance_diff.setter
    def compliance_diff(self, compliance_diff):
        """Sets the compliance_diff of this Event.

        Difference between the old and new compliance state of the resource.  # noqa: E501

        :param compliance_diff: The compliance_diff of this Event.  # noqa: E501
        :type: ComplianceDiff
        """

        self._compliance_diff = compliance_diff

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Event):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
