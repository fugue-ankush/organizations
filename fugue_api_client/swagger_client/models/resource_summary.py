# coding: utf-8

"""
    Fugue API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 0.0.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from swagger_client.models.resource_summary_families import ResourceSummaryFamilies  # noqa: F401,E501


class ResourceSummary(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'total': 'int',
        'compliant': 'int',
        'noncompliant': 'int',
        'rules_passed': 'int',
        'rules_failed': 'int',
        'resource_types': 'int',
        'families': 'list[ResourceSummaryFamilies]'
    }

    attribute_map = {
        'total': 'total',
        'compliant': 'compliant',
        'noncompliant': 'noncompliant',
        'rules_passed': 'rules_passed',
        'rules_failed': 'rules_failed',
        'resource_types': 'resource_types',
        'families': 'families'
    }

    def __init__(self, total=None, compliant=None, noncompliant=None, rules_passed=None, rules_failed=None, resource_types=None, families=None):  # noqa: E501
        """ResourceSummary - a model defined in Swagger"""  # noqa: E501

        self._total = None
        self._compliant = None
        self._noncompliant = None
        self._rules_passed = None
        self._rules_failed = None
        self._resource_types = None
        self._families = None
        self.discriminator = None

        if total is not None:
            self.total = total
        if compliant is not None:
            self.compliant = compliant
        if noncompliant is not None:
            self.noncompliant = noncompliant
        if rules_passed is not None:
            self.rules_passed = rules_passed
        if rules_failed is not None:
            self.rules_failed = rules_failed
        if resource_types is not None:
            self.resource_types = resource_types
        if families is not None:
            self.families = families

    @property
    def total(self):
        """Gets the total of this ResourceSummary.  # noqa: E501

        Total number of resources in the scan.  # noqa: E501

        :return: The total of this ResourceSummary.  # noqa: E501
        :rtype: int
        """
        return self._total

    @total.setter
    def total(self, total):
        """Sets the total of this ResourceSummary.

        Total number of resources in the scan.  # noqa: E501

        :param total: The total of this ResourceSummary.  # noqa: E501
        :type: int
        """

        self._total = total

    @property
    def compliant(self):
        """Gets the compliant of this ResourceSummary.  # noqa: E501

        Number of compliant resources.  # noqa: E501

        :return: The compliant of this ResourceSummary.  # noqa: E501
        :rtype: int
        """
        return self._compliant

    @compliant.setter
    def compliant(self, compliant):
        """Sets the compliant of this ResourceSummary.

        Number of compliant resources.  # noqa: E501

        :param compliant: The compliant of this ResourceSummary.  # noqa: E501
        :type: int
        """

        self._compliant = compliant

    @property
    def noncompliant(self):
        """Gets the noncompliant of this ResourceSummary.  # noqa: E501

        Number of noncompliant resources.  # noqa: E501

        :return: The noncompliant of this ResourceSummary.  # noqa: E501
        :rtype: int
        """
        return self._noncompliant

    @noncompliant.setter
    def noncompliant(self, noncompliant):
        """Sets the noncompliant of this ResourceSummary.

        Number of noncompliant resources.  # noqa: E501

        :param noncompliant: The noncompliant of this ResourceSummary.  # noqa: E501
        :type: int
        """

        self._noncompliant = noncompliant

    @property
    def rules_passed(self):
        """Gets the rules_passed of this ResourceSummary.  # noqa: E501

        Number of compliance rules passed.  # noqa: E501

        :return: The rules_passed of this ResourceSummary.  # noqa: E501
        :rtype: int
        """
        return self._rules_passed

    @rules_passed.setter
    def rules_passed(self, rules_passed):
        """Sets the rules_passed of this ResourceSummary.

        Number of compliance rules passed.  # noqa: E501

        :param rules_passed: The rules_passed of this ResourceSummary.  # noqa: E501
        :type: int
        """

        self._rules_passed = rules_passed

    @property
    def rules_failed(self):
        """Gets the rules_failed of this ResourceSummary.  # noqa: E501

        Number of compliance rules failed.  # noqa: E501

        :return: The rules_failed of this ResourceSummary.  # noqa: E501
        :rtype: int
        """
        return self._rules_failed

    @rules_failed.setter
    def rules_failed(self, rules_failed):
        """Sets the rules_failed of this ResourceSummary.

        Number of compliance rules failed.  # noqa: E501

        :param rules_failed: The rules_failed of this ResourceSummary.  # noqa: E501
        :type: int
        """

        self._rules_failed = rules_failed

    @property
    def resource_types(self):
        """Gets the resource_types of this ResourceSummary.  # noqa: E501

        Number of resource types in the scan.  # noqa: E501

        :return: The resource_types of this ResourceSummary.  # noqa: E501
        :rtype: int
        """
        return self._resource_types

    @resource_types.setter
    def resource_types(self, resource_types):
        """Sets the resource_types of this ResourceSummary.

        Number of resource types in the scan.  # noqa: E501

        :param resource_types: The resource_types of this ResourceSummary.  # noqa: E501
        :type: int
        """

        self._resource_types = resource_types

    @property
    def families(self):
        """Gets the families of this ResourceSummary.  # noqa: E501

        Compliance summary for the compliance families run against resources for the scan.  # noqa: E501

        :return: The families of this ResourceSummary.  # noqa: E501
        :rtype: list[ResourceSummaryFamilies]
        """
        return self._families

    @families.setter
    def families(self, families):
        """Sets the families of this ResourceSummary.

        Compliance summary for the compliance families run against resources for the scan.  # noqa: E501

        :param families: The families of this ResourceSummary.  # noqa: E501
        :type: list[ResourceSummaryFamilies]
        """

        self._families = families

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ResourceSummary):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
