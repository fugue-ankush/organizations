# coding: utf-8

"""
    Fugue API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 0.0.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class CreateNotificationInput(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'name': 'str',
        'events': 'list[str]',
        'environments': 'list[str]',
        'emails': 'list[str]',
        'topic_arn': 'str'
    }

    attribute_map = {
        'name': 'name',
        'events': 'events',
        'environments': 'environments',
        'emails': 'emails',
        'topic_arn': 'topic_arn'
    }

    def __init__(self, name=None, events=None, environments=None, emails=None, topic_arn=None):  # noqa: E501
        """CreateNotificationInput - a model defined in Swagger"""  # noqa: E501

        self._name = None
        self._events = None
        self._environments = None
        self._emails = None
        self._topic_arn = None
        self.discriminator = None

        if name is not None:
            self.name = name
        if events is not None:
            self.events = events
        if environments is not None:
            self.environments = environments
        if emails is not None:
            self.emails = emails
        if topic_arn is not None:
            self.topic_arn = topic_arn

    @property
    def name(self):
        """Gets the name of this CreateNotificationInput.  # noqa: E501

        Human readable name of the notification.  # noqa: E501

        :return: The name of this CreateNotificationInput.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this CreateNotificationInput.

        Human readable name of the notification.  # noqa: E501

        :param name: The name of this CreateNotificationInput.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def events(self):
        """Gets the events of this CreateNotificationInput.  # noqa: E501

        List of events the notification is triggered on.  # noqa: E501

        :return: The events of this CreateNotificationInput.  # noqa: E501
        :rtype: list[str]
        """
        return self._events

    @events.setter
    def events(self, events):
        """Sets the events of this CreateNotificationInput.

        List of events the notification is triggered on.  # noqa: E501

        :param events: The events of this CreateNotificationInput.  # noqa: E501
        :type: list[str]
        """

        self._events = events

    @property
    def environments(self):
        """Gets the environments of this CreateNotificationInput.  # noqa: E501

        List of environment ids the notification is attached to.  # noqa: E501

        :return: The environments of this CreateNotificationInput.  # noqa: E501
        :rtype: list[str]
        """
        return self._environments

    @environments.setter
    def environments(self, environments):
        """Sets the environments of this CreateNotificationInput.

        List of environment ids the notification is attached to.  # noqa: E501

        :param environments: The environments of this CreateNotificationInput.  # noqa: E501
        :type: list[str]
        """

        self._environments = environments

    @property
    def emails(self):
        """Gets the emails of this CreateNotificationInput.  # noqa: E501

        List of email address the notification is delivered to.  # noqa: E501

        :return: The emails of this CreateNotificationInput.  # noqa: E501
        :rtype: list[str]
        """
        return self._emails

    @emails.setter
    def emails(self, emails):
        """Sets the emails of this CreateNotificationInput.

        List of email address the notification is delivered to.  # noqa: E501

        :param emails: The emails of this CreateNotificationInput.  # noqa: E501
        :type: list[str]
        """

        self._emails = emails

    @property
    def topic_arn(self):
        """Gets the topic_arn of this CreateNotificationInput.  # noqa: E501

        AWS SNS topic arn the notification is delivered to.  # noqa: E501

        :return: The topic_arn of this CreateNotificationInput.  # noqa: E501
        :rtype: str
        """
        return self._topic_arn

    @topic_arn.setter
    def topic_arn(self, topic_arn):
        """Sets the topic_arn of this CreateNotificationInput.

        AWS SNS topic arn the notification is delivered to.  # noqa: E501

        :param topic_arn: The topic_arn of this CreateNotificationInput.  # noqa: E501
        :type: str
        """

        self._topic_arn = topic_arn

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CreateNotificationInput):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
