# coding: utf-8

"""
    Fugue API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 0.0.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class Notification(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'notification_id': 'str',
        'name': 'str',
        'events': 'list[str]',
        'environments': 'list[dict(str, str)]',
        'emails': 'list[str]',
        'topic_arn': 'str',
        'last_error': 'str',
        'created_by': 'str',
        'created_at': 'int',
        'updated_by': 'str',
        'updated_at': 'int'
    }

    attribute_map = {
        'notification_id': 'notification_id',
        'name': 'name',
        'events': 'events',
        'environments': 'environments',
        'emails': 'emails',
        'topic_arn': 'topic_arn',
        'last_error': 'last_error',
        'created_by': 'created_by',
        'created_at': 'created_at',
        'updated_by': 'updated_by',
        'updated_at': 'updated_at'
    }

    def __init__(self, notification_id=None, name=None, events=None, environments=None, emails=None, topic_arn=None, last_error=None, created_by=None, created_at=None, updated_by=None, updated_at=None):  # noqa: E501
        """Notification - a model defined in Swagger"""  # noqa: E501

        self._notification_id = None
        self._name = None
        self._events = None
        self._environments = None
        self._emails = None
        self._topic_arn = None
        self._last_error = None
        self._created_by = None
        self._created_at = None
        self._updated_by = None
        self._updated_at = None
        self.discriminator = None

        if notification_id is not None:
            self.notification_id = notification_id
        if name is not None:
            self.name = name
        if events is not None:
            self.events = events
        if environments is not None:
            self.environments = environments
        if emails is not None:
            self.emails = emails
        if topic_arn is not None:
            self.topic_arn = topic_arn
        if last_error is not None:
            self.last_error = last_error
        if created_by is not None:
            self.created_by = created_by
        if created_at is not None:
            self.created_at = created_at
        if updated_by is not None:
            self.updated_by = updated_by
        if updated_at is not None:
            self.updated_at = updated_at

    @property
    def notification_id(self):
        """Gets the notification_id of this Notification.  # noqa: E501

        ID of the notification.  # noqa: E501

        :return: The notification_id of this Notification.  # noqa: E501
        :rtype: str
        """
        return self._notification_id

    @notification_id.setter
    def notification_id(self, notification_id):
        """Sets the notification_id of this Notification.

        ID of the notification.  # noqa: E501

        :param notification_id: The notification_id of this Notification.  # noqa: E501
        :type: str
        """

        self._notification_id = notification_id

    @property
    def name(self):
        """Gets the name of this Notification.  # noqa: E501

        Human readable name of the notification.  # noqa: E501

        :return: The name of this Notification.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Notification.

        Human readable name of the notification.  # noqa: E501

        :param name: The name of this Notification.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def events(self):
        """Gets the events of this Notification.  # noqa: E501

        List of events the notification is triggered on.  # noqa: E501

        :return: The events of this Notification.  # noqa: E501
        :rtype: list[str]
        """
        return self._events

    @events.setter
    def events(self, events):
        """Sets the events of this Notification.

        List of events the notification is triggered on.  # noqa: E501

        :param events: The events of this Notification.  # noqa: E501
        :type: list[str]
        """

        self._events = events

    @property
    def environments(self):
        """Gets the environments of this Notification.  # noqa: E501

        List of maps from environment id to name the notification is attached to.  # noqa: E501

        :return: The environments of this Notification.  # noqa: E501
        :rtype: list[dict(str, str)]
        """
        return self._environments

    @environments.setter
    def environments(self, environments):
        """Sets the environments of this Notification.

        List of maps from environment id to name the notification is attached to.  # noqa: E501

        :param environments: The environments of this Notification.  # noqa: E501
        :type: list[dict(str, str)]
        """

        self._environments = environments

    @property
    def emails(self):
        """Gets the emails of this Notification.  # noqa: E501

        List of email address the notification is delivered to.  # noqa: E501

        :return: The emails of this Notification.  # noqa: E501
        :rtype: list[str]
        """
        return self._emails

    @emails.setter
    def emails(self, emails):
        """Sets the emails of this Notification.

        List of email address the notification is delivered to.  # noqa: E501

        :param emails: The emails of this Notification.  # noqa: E501
        :type: list[str]
        """

        self._emails = emails

    @property
    def topic_arn(self):
        """Gets the topic_arn of this Notification.  # noqa: E501

        AWS SNS topic arn the notification is delivered to.  # noqa: E501

        :return: The topic_arn of this Notification.  # noqa: E501
        :rtype: str
        """
        return self._topic_arn

    @topic_arn.setter
    def topic_arn(self, topic_arn):
        """Sets the topic_arn of this Notification.

        AWS SNS topic arn the notification is delivered to.  # noqa: E501

        :param topic_arn: The topic_arn of this Notification.  # noqa: E501
        :type: str
        """

        self._topic_arn = topic_arn

    @property
    def last_error(self):
        """Gets the last_error of this Notification.  # noqa: E501

        Last error recorded while processing notification. If the last notification processed had no error this field will be empty.  # noqa: E501

        :return: The last_error of this Notification.  # noqa: E501
        :rtype: str
        """
        return self._last_error

    @last_error.setter
    def last_error(self, last_error):
        """Sets the last_error of this Notification.

        Last error recorded while processing notification. If the last notification processed had no error this field will be empty.  # noqa: E501

        :param last_error: The last_error of this Notification.  # noqa: E501
        :type: str
        """

        self._last_error = last_error

    @property
    def created_by(self):
        """Gets the created_by of this Notification.  # noqa: E501

        Principal the created the notification.  # noqa: E501

        :return: The created_by of this Notification.  # noqa: E501
        :rtype: str
        """
        return self._created_by

    @created_by.setter
    def created_by(self, created_by):
        """Sets the created_by of this Notification.

        Principal the created the notification.  # noqa: E501

        :param created_by: The created_by of this Notification.  # noqa: E501
        :type: str
        """

        self._created_by = created_by

    @property
    def created_at(self):
        """Gets the created_at of this Notification.  # noqa: E501

        The date and time the notification was created.  # noqa: E501

        :return: The created_at of this Notification.  # noqa: E501
        :rtype: int
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this Notification.

        The date and time the notification was created.  # noqa: E501

        :param created_at: The created_at of this Notification.  # noqa: E501
        :type: int
        """

        self._created_at = created_at

    @property
    def updated_by(self):
        """Gets the updated_by of this Notification.  # noqa: E501

        Principal that last updated the notification.  # noqa: E501

        :return: The updated_by of this Notification.  # noqa: E501
        :rtype: str
        """
        return self._updated_by

    @updated_by.setter
    def updated_by(self, updated_by):
        """Sets the updated_by of this Notification.

        Principal that last updated the notification.  # noqa: E501

        :param updated_by: The updated_by of this Notification.  # noqa: E501
        :type: str
        """

        self._updated_by = updated_by

    @property
    def updated_at(self):
        """Gets the updated_at of this Notification.  # noqa: E501

        AWS The date and time the notification was last updated.  # noqa: E501

        :return: The updated_at of this Notification.  # noqa: E501
        :rtype: int
        """
        return self._updated_at

    @updated_at.setter
    def updated_at(self, updated_at):
        """Sets the updated_at of this Notification.

        AWS The date and time the notification was last updated.  # noqa: E501

        :param updated_at: The updated_at of this Notification.  # noqa: E501
        :type: int
        """

        self._updated_at = updated_at

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Notification):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
