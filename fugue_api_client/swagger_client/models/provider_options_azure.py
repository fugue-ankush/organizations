# coding: utf-8

"""
    Fugue API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 0.0.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class ProviderOptionsAzure(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'tenant_id': 'str',
        'subscription_id': 'str',
        'application_id': 'str',
        'client_secret': 'str',
        'survey_resource_groups': 'list[str]',
        'remediate_resource_groups': 'list[str]'
    }

    attribute_map = {
        'tenant_id': 'tenant_id',
        'subscription_id': 'subscription_id',
        'application_id': 'application_id',
        'client_secret': 'client_secret',
        'survey_resource_groups': 'survey_resource_groups',
        'remediate_resource_groups': 'remediate_resource_groups'
    }

    def __init__(self, tenant_id=None, subscription_id=None, application_id=None, client_secret=None, survey_resource_groups=None, remediate_resource_groups=None):  # noqa: E501
        """ProviderOptionsAzure - a model defined in Swagger"""  # noqa: E501

        self._tenant_id = None
        self._subscription_id = None
        self._application_id = None
        self._client_secret = None
        self._survey_resource_groups = None
        self._remediate_resource_groups = None
        self.discriminator = None

        if tenant_id is not None:
            self.tenant_id = tenant_id
        if subscription_id is not None:
            self.subscription_id = subscription_id
        if application_id is not None:
            self.application_id = application_id
        if client_secret is not None:
            self.client_secret = client_secret
        if survey_resource_groups is not None:
            self.survey_resource_groups = survey_resource_groups
        if remediate_resource_groups is not None:
            self.remediate_resource_groups = remediate_resource_groups

    @property
    def tenant_id(self):
        """Gets the tenant_id of this ProviderOptionsAzure.  # noqa: E501

        The tenant ID of the Azure subscription to be used  # noqa: E501

        :return: The tenant_id of this ProviderOptionsAzure.  # noqa: E501
        :rtype: str
        """
        return self._tenant_id

    @tenant_id.setter
    def tenant_id(self, tenant_id):
        """Sets the tenant_id of this ProviderOptionsAzure.

        The tenant ID of the Azure subscription to be used  # noqa: E501

        :param tenant_id: The tenant_id of this ProviderOptionsAzure.  # noqa: E501
        :type: str
        """

        self._tenant_id = tenant_id

    @property
    def subscription_id(self):
        """Gets the subscription_id of this ProviderOptionsAzure.  # noqa: E501

        The subscription ID of the Azure subscription to be used  # noqa: E501

        :return: The subscription_id of this ProviderOptionsAzure.  # noqa: E501
        :rtype: str
        """
        return self._subscription_id

    @subscription_id.setter
    def subscription_id(self, subscription_id):
        """Sets the subscription_id of this ProviderOptionsAzure.

        The subscription ID of the Azure subscription to be used  # noqa: E501

        :param subscription_id: The subscription_id of this ProviderOptionsAzure.  # noqa: E501
        :type: str
        """

        self._subscription_id = subscription_id

    @property
    def application_id(self):
        """Gets the application_id of this ProviderOptionsAzure.  # noqa: E501

        The application ID/client ID of the service principal to be used  # noqa: E501

        :return: The application_id of this ProviderOptionsAzure.  # noqa: E501
        :rtype: str
        """
        return self._application_id

    @application_id.setter
    def application_id(self, application_id):
        """Sets the application_id of this ProviderOptionsAzure.

        The application ID/client ID of the service principal to be used  # noqa: E501

        :param application_id: The application_id of this ProviderOptionsAzure.  # noqa: E501
        :type: str
        """

        self._application_id = application_id

    @property
    def client_secret(self):
        """Gets the client_secret of this ProviderOptionsAzure.  # noqa: E501

        The client secret of the service principal to be used  # noqa: E501

        :return: The client_secret of this ProviderOptionsAzure.  # noqa: E501
        :rtype: str
        """
        return self._client_secret

    @client_secret.setter
    def client_secret(self, client_secret):
        """Sets the client_secret of this ProviderOptionsAzure.

        The client secret of the service principal to be used  # noqa: E501

        :param client_secret: The client_secret of this ProviderOptionsAzure.  # noqa: E501
        :type: str
        """

        self._client_secret = client_secret

    @property
    def survey_resource_groups(self):
        """Gets the survey_resource_groups of this ProviderOptionsAzure.  # noqa: E501

        The resource groups to be surveyed  # noqa: E501

        :return: The survey_resource_groups of this ProviderOptionsAzure.  # noqa: E501
        :rtype: list[str]
        """
        return self._survey_resource_groups

    @survey_resource_groups.setter
    def survey_resource_groups(self, survey_resource_groups):
        """Sets the survey_resource_groups of this ProviderOptionsAzure.

        The resource groups to be surveyed  # noqa: E501

        :param survey_resource_groups: The survey_resource_groups of this ProviderOptionsAzure.  # noqa: E501
        :type: list[str]
        """

        self._survey_resource_groups = survey_resource_groups

    @property
    def remediate_resource_groups(self):
        """Gets the remediate_resource_groups of this ProviderOptionsAzure.  # noqa: E501

        The resource groups to be remediated  # noqa: E501

        :return: The remediate_resource_groups of this ProviderOptionsAzure.  # noqa: E501
        :rtype: list[str]
        """
        return self._remediate_resource_groups

    @remediate_resource_groups.setter
    def remediate_resource_groups(self, remediate_resource_groups):
        """Sets the remediate_resource_groups of this ProviderOptionsAzure.

        The resource groups to be remediated  # noqa: E501

        :param remediate_resource_groups: The remediate_resource_groups of this ProviderOptionsAzure.  # noqa: E501
        :type: list[str]
        """

        self._remediate_resource_groups = remediate_resource_groups

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ProviderOptionsAzure):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
