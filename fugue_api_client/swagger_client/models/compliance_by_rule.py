# coding: utf-8

"""
    Fugue API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 0.0.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from swagger_client.models.compliance_by_rule_failed_resource_types import ComplianceByRuleFailedResourceTypes  # noqa: F401,E501
from swagger_client.models.compliance_by_rule_failed_resources import ComplianceByRuleFailedResources  # noqa: F401,E501


class ComplianceByRule(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'family': 'str',
        'rule': 'str',
        'result': 'str',
        'unsurveyed_resource_types': 'list[str]',
        'failed_resource_types': 'list[ComplianceByRuleFailedResourceTypes]',
        'failed_resources': 'list[ComplianceByRuleFailedResources]'
    }

    attribute_map = {
        'family': 'family',
        'rule': 'rule',
        'result': 'result',
        'unsurveyed_resource_types': 'unsurveyed_resource_types',
        'failed_resource_types': 'failed_resource_types',
        'failed_resources': 'failed_resources'
    }

    def __init__(self, family=None, rule=None, result=None, unsurveyed_resource_types=None, failed_resource_types=None, failed_resources=None):  # noqa: E501
        """ComplianceByRule - a model defined in Swagger"""  # noqa: E501

        self._family = None
        self._rule = None
        self._result = None
        self._unsurveyed_resource_types = None
        self._failed_resource_types = None
        self._failed_resources = None
        self.discriminator = None

        if family is not None:
            self.family = family
        if rule is not None:
            self.rule = rule
        if result is not None:
            self.result = result
        if unsurveyed_resource_types is not None:
            self.unsurveyed_resource_types = unsurveyed_resource_types
        if failed_resource_types is not None:
            self.failed_resource_types = failed_resource_types
        if failed_resources is not None:
            self.failed_resources = failed_resources

    @property
    def family(self):
        """Gets the family of this ComplianceByRule.  # noqa: E501

        Name of the compliance family.  # noqa: E501

        :return: The family of this ComplianceByRule.  # noqa: E501
        :rtype: str
        """
        return self._family

    @family.setter
    def family(self, family):
        """Sets the family of this ComplianceByRule.

        Name of the compliance family.  # noqa: E501

        :param family: The family of this ComplianceByRule.  # noqa: E501
        :type: str
        """

        self._family = family

    @property
    def rule(self):
        """Gets the rule of this ComplianceByRule.  # noqa: E501

        Name of the compliance rule.  # noqa: E501

        :return: The rule of this ComplianceByRule.  # noqa: E501
        :rtype: str
        """
        return self._rule

    @rule.setter
    def rule(self, rule):
        """Sets the rule of this ComplianceByRule.

        Name of the compliance rule.  # noqa: E501

        :param rule: The rule of this ComplianceByRule.  # noqa: E501
        :type: str
        """

        self._rule = rule

    @property
    def result(self):
        """Gets the result of this ComplianceByRule.  # noqa: E501

        Result of the rule.  # noqa: E501

        :return: The result of this ComplianceByRule.  # noqa: E501
        :rtype: str
        """
        return self._result

    @result.setter
    def result(self, result):
        """Sets the result of this ComplianceByRule.

        Result of the rule.  # noqa: E501

        :param result: The result of this ComplianceByRule.  # noqa: E501
        :type: str
        """
        allowed_values = ["PASS", "FAIL", "UNKNOWN"]  # noqa: E501
        if result not in allowed_values:
            raise ValueError(
                "Invalid value for `result` ({0}), must be one of {1}"  # noqa: E501
                .format(result, allowed_values)
            )

        self._result = result

    @property
    def unsurveyed_resource_types(self):
        """Gets the unsurveyed_resource_types of this ComplianceByRule.  # noqa: E501

        List of resource types that were not surveyed and caused the result to be unknown.  # noqa: E501

        :return: The unsurveyed_resource_types of this ComplianceByRule.  # noqa: E501
        :rtype: list[str]
        """
        return self._unsurveyed_resource_types

    @unsurveyed_resource_types.setter
    def unsurveyed_resource_types(self, unsurveyed_resource_types):
        """Sets the unsurveyed_resource_types of this ComplianceByRule.

        List of resource types that were not surveyed and caused the result to be unknown.  # noqa: E501

        :param unsurveyed_resource_types: The unsurveyed_resource_types of this ComplianceByRule.  # noqa: E501
        :type: list[str]
        """

        self._unsurveyed_resource_types = unsurveyed_resource_types

    @property
    def failed_resource_types(self):
        """Gets the failed_resource_types of this ComplianceByRule.  # noqa: E501

        List of resource types that failed to satisfy the rule due to a required resource being omitted and associated error messages.  # noqa: E501

        :return: The failed_resource_types of this ComplianceByRule.  # noqa: E501
        :rtype: list[ComplianceByRuleFailedResourceTypes]
        """
        return self._failed_resource_types

    @failed_resource_types.setter
    def failed_resource_types(self, failed_resource_types):
        """Sets the failed_resource_types of this ComplianceByRule.

        List of resource types that failed to satisfy the rule due to a required resource being omitted and associated error messages.  # noqa: E501

        :param failed_resource_types: The failed_resource_types of this ComplianceByRule.  # noqa: E501
        :type: list[ComplianceByRuleFailedResourceTypes]
        """

        self._failed_resource_types = failed_resource_types

    @property
    def failed_resources(self):
        """Gets the failed_resources of this ComplianceByRule.  # noqa: E501

        List of resources that failed to satisfy the rule due to a misconfiguration in the resource and associated error messages.  # noqa: E501

        :return: The failed_resources of this ComplianceByRule.  # noqa: E501
        :rtype: list[ComplianceByRuleFailedResources]
        """
        return self._failed_resources

    @failed_resources.setter
    def failed_resources(self, failed_resources):
        """Sets the failed_resources of this ComplianceByRule.

        List of resources that failed to satisfy the rule due to a misconfiguration in the resource and associated error messages.  # noqa: E501

        :param failed_resources: The failed_resources of this ComplianceByRule.  # noqa: E501
        :type: list[ComplianceByRuleFailedResources]
        """

        self._failed_resources = failed_resources

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ComplianceByRule):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
