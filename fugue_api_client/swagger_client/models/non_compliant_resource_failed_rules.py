# coding: utf-8

"""
    Fugue API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 0.0.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class NonCompliantResourceFailedRules(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'family': 'str',
        'rule': 'str',
        'messages': 'list[str]'
    }

    attribute_map = {
        'family': 'family',
        'rule': 'rule',
        'messages': 'messages'
    }

    def __init__(self, family=None, rule=None, messages=None):  # noqa: E501
        """NonCompliantResourceFailedRules - a model defined in Swagger"""  # noqa: E501

        self._family = None
        self._rule = None
        self._messages = None
        self.discriminator = None

        if family is not None:
            self.family = family
        if rule is not None:
            self.rule = rule
        if messages is not None:
            self.messages = messages

    @property
    def family(self):
        """Gets the family of this NonCompliantResourceFailedRules.  # noqa: E501

        Compliance family the violated rule belongs to.  # noqa: E501

        :return: The family of this NonCompliantResourceFailedRules.  # noqa: E501
        :rtype: str
        """
        return self._family

    @family.setter
    def family(self, family):
        """Sets the family of this NonCompliantResourceFailedRules.

        Compliance family the violated rule belongs to.  # noqa: E501

        :param family: The family of this NonCompliantResourceFailedRules.  # noqa: E501
        :type: str
        """

        self._family = family

    @property
    def rule(self):
        """Gets the rule of this NonCompliantResourceFailedRules.  # noqa: E501

        ID of the violated rule.  # noqa: E501

        :return: The rule of this NonCompliantResourceFailedRules.  # noqa: E501
        :rtype: str
        """
        return self._rule

    @rule.setter
    def rule(self, rule):
        """Sets the rule of this NonCompliantResourceFailedRules.

        ID of the violated rule.  # noqa: E501

        :param rule: The rule of this NonCompliantResourceFailedRules.  # noqa: E501
        :type: str
        """

        self._rule = rule

    @property
    def messages(self):
        """Gets the messages of this NonCompliantResourceFailedRules.  # noqa: E501

        Reasons the resource was found in violation of a rule.  # noqa: E501

        :return: The messages of this NonCompliantResourceFailedRules.  # noqa: E501
        :rtype: list[str]
        """
        return self._messages

    @messages.setter
    def messages(self, messages):
        """Sets the messages of this NonCompliantResourceFailedRules.

        Reasons the resource was found in violation of a rule.  # noqa: E501

        :param messages: The messages of this NonCompliantResourceFailedRules.  # noqa: E501
        :type: list[str]
        """

        self._messages = messages

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, NonCompliantResourceFailedRules):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
