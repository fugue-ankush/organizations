# coding: utf-8

"""
    Fugue API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 0.0.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class ResourceSummaryFamilies(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'family': 'str',
        'compliant': 'int',
        'noncompliant': 'int',
        'rules_passed': 'int',
        'rules_failed': 'int'
    }

    attribute_map = {
        'family': 'family',
        'compliant': 'compliant',
        'noncompliant': 'noncompliant',
        'rules_passed': 'rules_passed',
        'rules_failed': 'rules_failed'
    }

    def __init__(self, family=None, compliant=None, noncompliant=None, rules_passed=None, rules_failed=None):  # noqa: E501
        """ResourceSummaryFamilies - a model defined in Swagger"""  # noqa: E501

        self._family = None
        self._compliant = None
        self._noncompliant = None
        self._rules_passed = None
        self._rules_failed = None
        self.discriminator = None

        if family is not None:
            self.family = family
        if compliant is not None:
            self.compliant = compliant
        if noncompliant is not None:
            self.noncompliant = noncompliant
        if rules_passed is not None:
            self.rules_passed = rules_passed
        if rules_failed is not None:
            self.rules_failed = rules_failed

    @property
    def family(self):
        """Gets the family of this ResourceSummaryFamilies.  # noqa: E501

        Name of the compliance family.  # noqa: E501

        :return: The family of this ResourceSummaryFamilies.  # noqa: E501
        :rtype: str
        """
        return self._family

    @family.setter
    def family(self, family):
        """Sets the family of this ResourceSummaryFamilies.

        Name of the compliance family.  # noqa: E501

        :param family: The family of this ResourceSummaryFamilies.  # noqa: E501
        :type: str
        """

        self._family = family

    @property
    def compliant(self):
        """Gets the compliant of this ResourceSummaryFamilies.  # noqa: E501

        Number of compliant resources in this family.  # noqa: E501

        :return: The compliant of this ResourceSummaryFamilies.  # noqa: E501
        :rtype: int
        """
        return self._compliant

    @compliant.setter
    def compliant(self, compliant):
        """Sets the compliant of this ResourceSummaryFamilies.

        Number of compliant resources in this family.  # noqa: E501

        :param compliant: The compliant of this ResourceSummaryFamilies.  # noqa: E501
        :type: int
        """

        self._compliant = compliant

    @property
    def noncompliant(self):
        """Gets the noncompliant of this ResourceSummaryFamilies.  # noqa: E501

        Number of noncompliant resources in this family.  # noqa: E501

        :return: The noncompliant of this ResourceSummaryFamilies.  # noqa: E501
        :rtype: int
        """
        return self._noncompliant

    @noncompliant.setter
    def noncompliant(self, noncompliant):
        """Sets the noncompliant of this ResourceSummaryFamilies.

        Number of noncompliant resources in this family.  # noqa: E501

        :param noncompliant: The noncompliant of this ResourceSummaryFamilies.  # noqa: E501
        :type: int
        """

        self._noncompliant = noncompliant

    @property
    def rules_passed(self):
        """Gets the rules_passed of this ResourceSummaryFamilies.  # noqa: E501

        Number of compliance rules passed in this family.  # noqa: E501

        :return: The rules_passed of this ResourceSummaryFamilies.  # noqa: E501
        :rtype: int
        """
        return self._rules_passed

    @rules_passed.setter
    def rules_passed(self, rules_passed):
        """Sets the rules_passed of this ResourceSummaryFamilies.

        Number of compliance rules passed in this family.  # noqa: E501

        :param rules_passed: The rules_passed of this ResourceSummaryFamilies.  # noqa: E501
        :type: int
        """

        self._rules_passed = rules_passed

    @property
    def rules_failed(self):
        """Gets the rules_failed of this ResourceSummaryFamilies.  # noqa: E501

        Number of compliance rules failed in this family.  # noqa: E501

        :return: The rules_failed of this ResourceSummaryFamilies.  # noqa: E501
        :rtype: int
        """
        return self._rules_failed

    @rules_failed.setter
    def rules_failed(self, rules_failed):
        """Sets the rules_failed of this ResourceSummaryFamilies.

        Number of compliance rules failed in this family.  # noqa: E501

        :param rules_failed: The rules_failed of this ResourceSummaryFamilies.  # noqa: E501
        :type: int
        """

        self._rules_failed = rules_failed

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ResourceSummaryFamilies):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
