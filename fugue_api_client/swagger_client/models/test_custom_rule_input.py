# coding: utf-8

"""
    Fugue API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 0.0.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class TestCustomRuleInput(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'resource_type': 'str',
        'rule_text': 'str',
        'scan_id': 'str'
    }

    attribute_map = {
        'resource_type': 'resource_type',
        'rule_text': 'rule_text',
        'scan_id': 'scan_id'
    }

    def __init__(self, resource_type=None, rule_text=None, scan_id=None):  # noqa: E501
        """TestCustomRuleInput - a model defined in Swagger"""  # noqa: E501

        self._resource_type = None
        self._rule_text = None
        self._scan_id = None
        self.discriminator = None

        if resource_type is not None:
            self.resource_type = resource_type
        self.rule_text = rule_text
        self.scan_id = scan_id

    @property
    def resource_type(self):
        """Gets the resource_type of this TestCustomRuleInput.  # noqa: E501

        Resource type to which the custom rule applies  # noqa: E501

        :return: The resource_type of this TestCustomRuleInput.  # noqa: E501
        :rtype: str
        """
        return self._resource_type

    @resource_type.setter
    def resource_type(self, resource_type):
        """Sets the resource_type of this TestCustomRuleInput.

        Resource type to which the custom rule applies  # noqa: E501

        :param resource_type: The resource_type of this TestCustomRuleInput.  # noqa: E501
        :type: str
        """

        self._resource_type = resource_type

    @property
    def rule_text(self):
        """Gets the rule_text of this TestCustomRuleInput.  # noqa: E501

        The rego source code for the rule  # noqa: E501

        :return: The rule_text of this TestCustomRuleInput.  # noqa: E501
        :rtype: str
        """
        return self._rule_text

    @rule_text.setter
    def rule_text(self, rule_text):
        """Sets the rule_text of this TestCustomRuleInput.

        The rego source code for the rule  # noqa: E501

        :param rule_text: The rule_text of this TestCustomRuleInput.  # noqa: E501
        :type: str
        """
        if rule_text is None:
            raise ValueError("Invalid value for `rule_text`, must not be `None`")  # noqa: E501

        self._rule_text = rule_text

    @property
    def scan_id(self):
        """Gets the scan_id of this TestCustomRuleInput.  # noqa: E501

        Scan to test the custom rule with  # noqa: E501

        :return: The scan_id of this TestCustomRuleInput.  # noqa: E501
        :rtype: str
        """
        return self._scan_id

    @scan_id.setter
    def scan_id(self, scan_id):
        """Sets the scan_id of this TestCustomRuleInput.

        Scan to test the custom rule with  # noqa: E501

        :param scan_id: The scan_id of this TestCustomRuleInput.  # noqa: E501
        :type: str
        """
        if scan_id is None:
            raise ValueError("Invalid value for `scan_id`, must not be `None`")  # noqa: E501

        self._scan_id = scan_id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, TestCustomRuleInput):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
