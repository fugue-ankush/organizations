# coding: utf-8

"""
    Fugue API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 0.0.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from swagger_client.models.custom_rule import CustomRule  # noqa: F401,E501
from swagger_client.models.custom_rule_error import CustomRuleError  # noqa: F401,E501


class CustomRuleWithErrors(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'id': 'str',
        'name': 'str',
        'source': 'str',
        'description': 'str',
        'provider': 'str',
        'resource_type': 'str',
        'compliance_controls': 'list[str]',
        'status': 'str',
        'rule_text': 'str',
        'created_by': 'str',
        'created_by_display_name': 'str',
        'created_at': 'int',
        'updated_by': 'str',
        'updated_by_display_name': 'str',
        'updated_at': 'int',
        'errors': 'list[CustomRuleError]'
    }

    attribute_map = {
        'id': 'id',
        'name': 'name',
        'source': 'source',
        'description': 'description',
        'provider': 'provider',
        'resource_type': 'resource_type',
        'compliance_controls': 'compliance_controls',
        'status': 'status',
        'rule_text': 'rule_text',
        'created_by': 'created_by',
        'created_by_display_name': 'created_by_display_name',
        'created_at': 'created_at',
        'updated_by': 'updated_by',
        'updated_by_display_name': 'updated_by_display_name',
        'updated_at': 'updated_at',
        'errors': 'errors'
    }

    def __init__(self, id=None, name=None, source=None, description=None, provider=None, resource_type=None, compliance_controls=None, status=None, rule_text=None, created_by=None, created_by_display_name=None, created_at=None, updated_by=None, updated_by_display_name=None, updated_at=None, errors=None):  # noqa: E501
        """CustomRuleWithErrors - a model defined in Swagger"""  # noqa: E501

        self._id = None
        self._name = None
        self._source = None
        self._description = None
        self._provider = None
        self._resource_type = None
        self._compliance_controls = None
        self._status = None
        self._rule_text = None
        self._created_by = None
        self._created_by_display_name = None
        self._created_at = None
        self._updated_by = None
        self._updated_by_display_name = None
        self._updated_at = None
        self._errors = None
        self.discriminator = None

        if id is not None:
            self.id = id
        if name is not None:
            self.name = name
        if source is not None:
            self.source = source
        if description is not None:
            self.description = description
        if provider is not None:
            self.provider = provider
        if resource_type is not None:
            self.resource_type = resource_type
        if compliance_controls is not None:
            self.compliance_controls = compliance_controls
        if status is not None:
            self.status = status
        if rule_text is not None:
            self.rule_text = rule_text
        if created_by is not None:
            self.created_by = created_by
        if created_by_display_name is not None:
            self.created_by_display_name = created_by_display_name
        if created_at is not None:
            self.created_at = created_at
        if updated_by is not None:
            self.updated_by = updated_by
        if updated_by_display_name is not None:
            self.updated_by_display_name = updated_by_display_name
        if updated_at is not None:
            self.updated_at = updated_at
        if errors is not None:
            self.errors = errors

    @property
    def id(self):
        """Gets the id of this CustomRuleWithErrors.  # noqa: E501

        ID of the custom rule.  # noqa: E501

        :return: The id of this CustomRuleWithErrors.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this CustomRuleWithErrors.

        ID of the custom rule.  # noqa: E501

        :param id: The id of this CustomRuleWithErrors.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def name(self):
        """Gets the name of this CustomRuleWithErrors.  # noqa: E501

        Human readable name of the custom rule.  # noqa: E501

        :return: The name of this CustomRuleWithErrors.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this CustomRuleWithErrors.

        Human readable name of the custom rule.  # noqa: E501

        :param name: The name of this CustomRuleWithErrors.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def source(self):
        """Gets the source of this CustomRuleWithErrors.  # noqa: E501

        The origin of this rule.  # noqa: E501

        :return: The source of this CustomRuleWithErrors.  # noqa: E501
        :rtype: str
        """
        return self._source

    @source.setter
    def source(self, source):
        """Sets the source of this CustomRuleWithErrors.

        The origin of this rule.  # noqa: E501

        :param source: The source of this CustomRuleWithErrors.  # noqa: E501
        :type: str
        """
        allowed_values = ["CUSTOM"]  # noqa: E501
        if source not in allowed_values:
            raise ValueError(
                "Invalid value for `source` ({0}), must be one of {1}"  # noqa: E501
                .format(source, allowed_values)
            )

        self._source = source

    @property
    def description(self):
        """Gets the description of this CustomRuleWithErrors.  # noqa: E501

        Description of the custom rule.  # noqa: E501

        :return: The description of this CustomRuleWithErrors.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this CustomRuleWithErrors.

        Description of the custom rule.  # noqa: E501

        :param description: The description of this CustomRuleWithErrors.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def provider(self):
        """Gets the provider of this CustomRuleWithErrors.  # noqa: E501

        Provider of the custom rule.  # noqa: E501

        :return: The provider of this CustomRuleWithErrors.  # noqa: E501
        :rtype: str
        """
        return self._provider

    @provider.setter
    def provider(self, provider):
        """Sets the provider of this CustomRuleWithErrors.

        Provider of the custom rule.  # noqa: E501

        :param provider: The provider of this CustomRuleWithErrors.  # noqa: E501
        :type: str
        """
        allowed_values = ["AWS", "AWS_GOVCLOUD", "AZURE"]  # noqa: E501
        if provider not in allowed_values:
            raise ValueError(
                "Invalid value for `provider` ({0}), must be one of {1}"  # noqa: E501
                .format(provider, allowed_values)
            )

        self._provider = provider

    @property
    def resource_type(self):
        """Gets the resource_type of this CustomRuleWithErrors.  # noqa: E501

        Resource type to which the custom rule applies.  # noqa: E501

        :return: The resource_type of this CustomRuleWithErrors.  # noqa: E501
        :rtype: str
        """
        return self._resource_type

    @resource_type.setter
    def resource_type(self, resource_type):
        """Sets the resource_type of this CustomRuleWithErrors.

        Resource type to which the custom rule applies.  # noqa: E501

        :param resource_type: The resource_type of this CustomRuleWithErrors.  # noqa: E501
        :type: str
        """

        self._resource_type = resource_type

    @property
    def compliance_controls(self):
        """Gets the compliance_controls of this CustomRuleWithErrors.  # noqa: E501

        Compliance controls to which the custom rule belongs.  # noqa: E501

        :return: The compliance_controls of this CustomRuleWithErrors.  # noqa: E501
        :rtype: list[str]
        """
        return self._compliance_controls

    @compliance_controls.setter
    def compliance_controls(self, compliance_controls):
        """Sets the compliance_controls of this CustomRuleWithErrors.

        Compliance controls to which the custom rule belongs.  # noqa: E501

        :param compliance_controls: The compliance_controls of this CustomRuleWithErrors.  # noqa: E501
        :type: list[str]
        """

        self._compliance_controls = compliance_controls

    @property
    def status(self):
        """Gets the status of this CustomRuleWithErrors.  # noqa: E501

        The current status of the rule.  # noqa: E501

        :return: The status of this CustomRuleWithErrors.  # noqa: E501
        :rtype: str
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this CustomRuleWithErrors.

        The current status of the rule.  # noqa: E501

        :param status: The status of this CustomRuleWithErrors.  # noqa: E501
        :type: str
        """
        allowed_values = ["ENABLED", "DISABLED", "INVALID"]  # noqa: E501
        if status not in allowed_values:
            raise ValueError(
                "Invalid value for `status` ({0}), must be one of {1}"  # noqa: E501
                .format(status, allowed_values)
            )

        self._status = status

    @property
    def rule_text(self):
        """Gets the rule_text of this CustomRuleWithErrors.  # noqa: E501

        The rego source code for the rule.  # noqa: E501

        :return: The rule_text of this CustomRuleWithErrors.  # noqa: E501
        :rtype: str
        """
        return self._rule_text

    @rule_text.setter
    def rule_text(self, rule_text):
        """Sets the rule_text of this CustomRuleWithErrors.

        The rego source code for the rule.  # noqa: E501

        :param rule_text: The rule_text of this CustomRuleWithErrors.  # noqa: E501
        :type: str
        """

        self._rule_text = rule_text

    @property
    def created_by(self):
        """Gets the created_by of this CustomRuleWithErrors.  # noqa: E501

        Principal that created the rule.  # noqa: E501

        :return: The created_by of this CustomRuleWithErrors.  # noqa: E501
        :rtype: str
        """
        return self._created_by

    @created_by.setter
    def created_by(self, created_by):
        """Sets the created_by of this CustomRuleWithErrors.

        Principal that created the rule.  # noqa: E501

        :param created_by: The created_by of this CustomRuleWithErrors.  # noqa: E501
        :type: str
        """

        self._created_by = created_by

    @property
    def created_by_display_name(self):
        """Gets the created_by_display_name of this CustomRuleWithErrors.  # noqa: E501

        Display name of the user that created the rule  # noqa: E501

        :return: The created_by_display_name of this CustomRuleWithErrors.  # noqa: E501
        :rtype: str
        """
        return self._created_by_display_name

    @created_by_display_name.setter
    def created_by_display_name(self, created_by_display_name):
        """Sets the created_by_display_name of this CustomRuleWithErrors.

        Display name of the user that created the rule  # noqa: E501

        :param created_by_display_name: The created_by_display_name of this CustomRuleWithErrors.  # noqa: E501
        :type: str
        """

        self._created_by_display_name = created_by_display_name

    @property
    def created_at(self):
        """Gets the created_at of this CustomRuleWithErrors.  # noqa: E501

        The date and time the rule was created.  # noqa: E501

        :return: The created_at of this CustomRuleWithErrors.  # noqa: E501
        :rtype: int
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this CustomRuleWithErrors.

        The date and time the rule was created.  # noqa: E501

        :param created_at: The created_at of this CustomRuleWithErrors.  # noqa: E501
        :type: int
        """

        self._created_at = created_at

    @property
    def updated_by(self):
        """Gets the updated_by of this CustomRuleWithErrors.  # noqa: E501

        Principal that last updated the rule.  # noqa: E501

        :return: The updated_by of this CustomRuleWithErrors.  # noqa: E501
        :rtype: str
        """
        return self._updated_by

    @updated_by.setter
    def updated_by(self, updated_by):
        """Sets the updated_by of this CustomRuleWithErrors.

        Principal that last updated the rule.  # noqa: E501

        :param updated_by: The updated_by of this CustomRuleWithErrors.  # noqa: E501
        :type: str
        """

        self._updated_by = updated_by

    @property
    def updated_by_display_name(self):
        """Gets the updated_by_display_name of this CustomRuleWithErrors.  # noqa: E501

        Display name of the user that last updated the rule  # noqa: E501

        :return: The updated_by_display_name of this CustomRuleWithErrors.  # noqa: E501
        :rtype: str
        """
        return self._updated_by_display_name

    @updated_by_display_name.setter
    def updated_by_display_name(self, updated_by_display_name):
        """Sets the updated_by_display_name of this CustomRuleWithErrors.

        Display name of the user that last updated the rule  # noqa: E501

        :param updated_by_display_name: The updated_by_display_name of this CustomRuleWithErrors.  # noqa: E501
        :type: str
        """

        self._updated_by_display_name = updated_by_display_name

    @property
    def updated_at(self):
        """Gets the updated_at of this CustomRuleWithErrors.  # noqa: E501

        The date and time the rule was last updated.  # noqa: E501

        :return: The updated_at of this CustomRuleWithErrors.  # noqa: E501
        :rtype: int
        """
        return self._updated_at

    @updated_at.setter
    def updated_at(self, updated_at):
        """Sets the updated_at of this CustomRuleWithErrors.

        The date and time the rule was last updated.  # noqa: E501

        :param updated_at: The updated_at of this CustomRuleWithErrors.  # noqa: E501
        :type: int
        """

        self._updated_at = updated_at

    @property
    def errors(self):
        """Gets the errors of this CustomRuleWithErrors.  # noqa: E501

        Syntax errors in the rego source code.  # noqa: E501

        :return: The errors of this CustomRuleWithErrors.  # noqa: E501
        :rtype: list[CustomRuleError]
        """
        return self._errors

    @errors.setter
    def errors(self, errors):
        """Sets the errors of this CustomRuleWithErrors.

        Syntax errors in the rego source code.  # noqa: E501

        :param errors: The errors of this CustomRuleWithErrors.  # noqa: E501
        :type: list[CustomRuleError]
        """

        self._errors = errors

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, CustomRuleWithErrors):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
