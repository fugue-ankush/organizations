# coding: utf-8

"""
    Fugue API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 0.0.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from swagger_client.api_client import ApiClient


class ScansApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def create_scan(self, environment_id, **kwargs):  # noqa: E501
        """Creates and triggers a new environment scan.  # noqa: E501

        Creates and triggers a new environment scan.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.create_scan(environment_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str environment_id: ID of the environment to scan. (required)
        :return: Scan
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.create_scan_with_http_info(environment_id, **kwargs)  # noqa: E501
        else:
            (data) = self.create_scan_with_http_info(environment_id, **kwargs)  # noqa: E501
            return data

    def create_scan_with_http_info(self, environment_id, **kwargs):  # noqa: E501
        """Creates and triggers a new environment scan.  # noqa: E501

        Creates and triggers a new environment scan.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.create_scan_with_http_info(environment_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str environment_id: ID of the environment to scan. (required)
        :return: Scan
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['environment_id']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_scan" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'environment_id' is set
        if ('environment_id' not in params or
                params['environment_id'] is None):
            raise ValueError("Missing the required parameter `environment_id` when calling `create_scan`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'environment_id' in params:
            query_params.append(('environment_id', params['environment_id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/scans', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Scan',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_compliance_by_resource_types(self, scan_id, **kwargs):  # noqa: E501
        """Lists compliance results by resource type for a scan.  # noqa: E501

        Lists compliance results by resource type for a scan.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_compliance_by_resource_types(scan_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str scan_id: Scan ID. (required)
        :param int offset: Number of items to skip before returning. This parameter is used when the number of items spans multiple pages.
        :param int max_items: Maximum number of items to return.
        :param list[str] resource_type: Resource types to filter by. When not specified, all resource types will be returned.
        :param list[str] family: Compliance family to filter by. When not specified, all compliance families will be returned.
        :return: ComplianceByResourceTypeOutput
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.get_compliance_by_resource_types_with_http_info(scan_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_compliance_by_resource_types_with_http_info(scan_id, **kwargs)  # noqa: E501
            return data

    def get_compliance_by_resource_types_with_http_info(self, scan_id, **kwargs):  # noqa: E501
        """Lists compliance results by resource type for a scan.  # noqa: E501

        Lists compliance results by resource type for a scan.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_compliance_by_resource_types_with_http_info(scan_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str scan_id: Scan ID. (required)
        :param int offset: Number of items to skip before returning. This parameter is used when the number of items spans multiple pages.
        :param int max_items: Maximum number of items to return.
        :param list[str] resource_type: Resource types to filter by. When not specified, all resource types will be returned.
        :param list[str] family: Compliance family to filter by. When not specified, all compliance families will be returned.
        :return: ComplianceByResourceTypeOutput
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['scan_id', 'offset', 'max_items', 'resource_type', 'family']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_compliance_by_resource_types" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'scan_id' is set
        if ('scan_id' not in params or
                params['scan_id'] is None):
            raise ValueError("Missing the required parameter `scan_id` when calling `get_compliance_by_resource_types`")  # noqa: E501

        if 'offset' in params and params['offset'] < 0:  # noqa: E501
            raise ValueError("Invalid value for parameter `offset` when calling `get_compliance_by_resource_types`, must be a value greater than or equal to `0`")  # noqa: E501
        if 'max_items' in params and params['max_items'] > 100:  # noqa: E501
            raise ValueError("Invalid value for parameter `max_items` when calling `get_compliance_by_resource_types`, must be a value less than or equal to `100`")  # noqa: E501
        if 'max_items' in params and params['max_items'] < 1:  # noqa: E501
            raise ValueError("Invalid value for parameter `max_items` when calling `get_compliance_by_resource_types`, must be a value greater than or equal to `1`")  # noqa: E501
        collection_formats = {}

        path_params = {}
        if 'scan_id' in params:
            path_params['scan_id'] = params['scan_id']  # noqa: E501

        query_params = []
        if 'offset' in params:
            query_params.append(('offset', params['offset']))  # noqa: E501
        if 'max_items' in params:
            query_params.append(('max_items', params['max_items']))  # noqa: E501
        if 'resource_type' in params:
            query_params.append(('resource_type', params['resource_type']))  # noqa: E501
            collection_formats['resource_type'] = 'multi'  # noqa: E501
        if 'family' in params:
            query_params.append(('family', params['family']))  # noqa: E501
            collection_formats['family'] = 'multi'  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/scans/{scan_id}/compliance_by_resource_types', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ComplianceByResourceTypeOutput',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_compliance_by_rules(self, scan_id, **kwargs):  # noqa: E501
        """Lists compliance results by rule for a scan.  # noqa: E501

        Lists compliance results by rule for a scan.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_compliance_by_rules(scan_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str scan_id: Scan ID. (required)
        :param int offset: Number of items to skip before returning. This parameter is used when the number of items spans multiple pages.
        :param int max_items: Maximum number of items to return.
        :param list[str] family: Compliance family to filter by. When not specified, all compliance families will be returned.
        :param list[str] result: Rule result to filter by. When not specified, all results will be returned.
        :return: ComplianceByRules
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.get_compliance_by_rules_with_http_info(scan_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_compliance_by_rules_with_http_info(scan_id, **kwargs)  # noqa: E501
            return data

    def get_compliance_by_rules_with_http_info(self, scan_id, **kwargs):  # noqa: E501
        """Lists compliance results by rule for a scan.  # noqa: E501

        Lists compliance results by rule for a scan.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_compliance_by_rules_with_http_info(scan_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str scan_id: Scan ID. (required)
        :param int offset: Number of items to skip before returning. This parameter is used when the number of items spans multiple pages.
        :param int max_items: Maximum number of items to return.
        :param list[str] family: Compliance family to filter by. When not specified, all compliance families will be returned.
        :param list[str] result: Rule result to filter by. When not specified, all results will be returned.
        :return: ComplianceByRules
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['scan_id', 'offset', 'max_items', 'family', 'result']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_compliance_by_rules" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'scan_id' is set
        if ('scan_id' not in params or
                params['scan_id'] is None):
            raise ValueError("Missing the required parameter `scan_id` when calling `get_compliance_by_rules`")  # noqa: E501

        if 'offset' in params and params['offset'] < 0:  # noqa: E501
            raise ValueError("Invalid value for parameter `offset` when calling `get_compliance_by_rules`, must be a value greater than or equal to `0`")  # noqa: E501
        if 'max_items' in params and params['max_items'] > 100:  # noqa: E501
            raise ValueError("Invalid value for parameter `max_items` when calling `get_compliance_by_rules`, must be a value less than or equal to `100`")  # noqa: E501
        if 'max_items' in params and params['max_items'] < 1:  # noqa: E501
            raise ValueError("Invalid value for parameter `max_items` when calling `get_compliance_by_rules`, must be a value greater than or equal to `1`")  # noqa: E501
        collection_formats = {}

        path_params = {}
        if 'scan_id' in params:
            path_params['scan_id'] = params['scan_id']  # noqa: E501

        query_params = []
        if 'offset' in params:
            query_params.append(('offset', params['offset']))  # noqa: E501
        if 'max_items' in params:
            query_params.append(('max_items', params['max_items']))  # noqa: E501
        if 'family' in params:
            query_params.append(('family', params['family']))  # noqa: E501
            collection_formats['family'] = 'multi'  # noqa: E501
        if 'result' in params:
            query_params.append(('result', params['result']))  # noqa: E501
            collection_formats['result'] = 'multi'  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/scans/{scan_id}/compliance_by_rules', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ComplianceByRules',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_scan(self, scan_id, **kwargs):  # noqa: E501
        """Retrieves details for a scan.  # noqa: E501

        Retrieves details for a scan.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_scan(scan_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str scan_id: Scan ID. (required)
        :return: ScanWithSummary
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.get_scan_with_http_info(scan_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_scan_with_http_info(scan_id, **kwargs)  # noqa: E501
            return data

    def get_scan_with_http_info(self, scan_id, **kwargs):  # noqa: E501
        """Retrieves details for a scan.  # noqa: E501

        Retrieves details for a scan.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_scan_with_http_info(scan_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str scan_id: Scan ID. (required)
        :return: ScanWithSummary
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['scan_id']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_scan" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'scan_id' is set
        if ('scan_id' not in params or
                params['scan_id'] is None):
            raise ValueError("Missing the required parameter `scan_id` when calling `get_scan`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'scan_id' in params:
            path_params['scan_id'] = params['scan_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/scans/{scan_id}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ScanWithSummary',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def list_scans(self, environment_id, **kwargs):  # noqa: E501
        """Lists scans for an environment.  # noqa: E501

        Lists scans for an environment.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.list_scans(environment_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str environment_id: ID of the environment to retrieve scans for. (required)
        :param int offset: Number of items to skip before returning. This parameter is used when the number of items spans multiple pages.
        :param int max_items: Maximum number of items to return.
        :param str order_by: Field to sort the items by.
        :param str order_direction: Direction to sort the items in.
        :param list[str] status: Status to filter by. When not specified, all statuses will be returned.
        :param int range_from: Earliest created_at time to return scans from.
        :param int range_to: Latest created_at time to return scans from.
        :return: Scans
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.list_scans_with_http_info(environment_id, **kwargs)  # noqa: E501
        else:
            (data) = self.list_scans_with_http_info(environment_id, **kwargs)  # noqa: E501
            return data

    def list_scans_with_http_info(self, environment_id, **kwargs):  # noqa: E501
        """Lists scans for an environment.  # noqa: E501

        Lists scans for an environment.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.list_scans_with_http_info(environment_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str environment_id: ID of the environment to retrieve scans for. (required)
        :param int offset: Number of items to skip before returning. This parameter is used when the number of items spans multiple pages.
        :param int max_items: Maximum number of items to return.
        :param str order_by: Field to sort the items by.
        :param str order_direction: Direction to sort the items in.
        :param list[str] status: Status to filter by. When not specified, all statuses will be returned.
        :param int range_from: Earliest created_at time to return scans from.
        :param int range_to: Latest created_at time to return scans from.
        :return: Scans
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['environment_id', 'offset', 'max_items', 'order_by', 'order_direction', 'status', 'range_from', 'range_to']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method list_scans" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'environment_id' is set
        if ('environment_id' not in params or
                params['environment_id'] is None):
            raise ValueError("Missing the required parameter `environment_id` when calling `list_scans`")  # noqa: E501

        if 'offset' in params and params['offset'] < 0:  # noqa: E501
            raise ValueError("Invalid value for parameter `offset` when calling `list_scans`, must be a value greater than or equal to `0`")  # noqa: E501
        if 'max_items' in params and params['max_items'] > 100:  # noqa: E501
            raise ValueError("Invalid value for parameter `max_items` when calling `list_scans`, must be a value less than or equal to `100`")  # noqa: E501
        if 'max_items' in params and params['max_items'] < 1:  # noqa: E501
            raise ValueError("Invalid value for parameter `max_items` when calling `list_scans`, must be a value greater than or equal to `1`")  # noqa: E501
        if 'range_from' in params and params['range_from'] < 0:  # noqa: E501
            raise ValueError("Invalid value for parameter `range_from` when calling `list_scans`, must be a value greater than or equal to `0`")  # noqa: E501
        if 'range_to' in params and params['range_to'] < 0:  # noqa: E501
            raise ValueError("Invalid value for parameter `range_to` when calling `list_scans`, must be a value greater than or equal to `0`")  # noqa: E501
        collection_formats = {}

        path_params = {}

        query_params = []
        if 'environment_id' in params:
            query_params.append(('environment_id', params['environment_id']))  # noqa: E501
        if 'offset' in params:
            query_params.append(('offset', params['offset']))  # noqa: E501
        if 'max_items' in params:
            query_params.append(('max_items', params['max_items']))  # noqa: E501
        if 'order_by' in params:
            query_params.append(('order_by', params['order_by']))  # noqa: E501
        if 'order_direction' in params:
            query_params.append(('order_direction', params['order_direction']))  # noqa: E501
        if 'status' in params:
            query_params.append(('status', params['status']))  # noqa: E501
            collection_formats['status'] = 'multi'  # noqa: E501
        if 'range_from' in params:
            query_params.append(('range_from', params['range_from']))  # noqa: E501
        if 'range_to' in params:
            query_params.append(('range_to', params['range_to']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/scans', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Scans',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
