# coding: utf-8

"""
    Fugue API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 0.0.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from swagger_client.api_client import ApiClient


class EventsApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def list_events(self, environment_id, **kwargs):  # noqa: E501
        """Lists drift, remediation, and compliance events for an environment.  # noqa: E501

        Lists drift, remediation, and compliance events for an environment.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.list_events(environment_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str environment_id: Environment ID. (required)
        :param int offset: Number of items to skip before returning. This parameter is used when the number of items spans multiple pages.
        :param int max_items: Maximum number of items to return.
        :param int range_from: Earliest created_at time to return events from.
        :param int range_to: Latest created_at time to return events from.
        :param list[str] event_type: Event type to filter by. When not specified, all event types will be returned.
        :param list[str] change: Type of change made in the event to filter by. When not specified, all change types will be returned.
        :param list[str] remediated: Filter remediation results for an event by success or failure. When not specified, all remediation results will be returned.
        :param list[str] resource_type: Resource types in the event to filter by. When not specified, all resource types will be returned.
        :return: Events
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.list_events_with_http_info(environment_id, **kwargs)  # noqa: E501
        else:
            (data) = self.list_events_with_http_info(environment_id, **kwargs)  # noqa: E501
            return data

    def list_events_with_http_info(self, environment_id, **kwargs):  # noqa: E501
        """Lists drift, remediation, and compliance events for an environment.  # noqa: E501

        Lists drift, remediation, and compliance events for an environment.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.list_events_with_http_info(environment_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str environment_id: Environment ID. (required)
        :param int offset: Number of items to skip before returning. This parameter is used when the number of items spans multiple pages.
        :param int max_items: Maximum number of items to return.
        :param int range_from: Earliest created_at time to return events from.
        :param int range_to: Latest created_at time to return events from.
        :param list[str] event_type: Event type to filter by. When not specified, all event types will be returned.
        :param list[str] change: Type of change made in the event to filter by. When not specified, all change types will be returned.
        :param list[str] remediated: Filter remediation results for an event by success or failure. When not specified, all remediation results will be returned.
        :param list[str] resource_type: Resource types in the event to filter by. When not specified, all resource types will be returned.
        :return: Events
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['environment_id', 'offset', 'max_items', 'range_from', 'range_to', 'event_type', 'change', 'remediated', 'resource_type']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method list_events" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'environment_id' is set
        if ('environment_id' not in params or
                params['environment_id'] is None):
            raise ValueError("Missing the required parameter `environment_id` when calling `list_events`")  # noqa: E501

        if 'offset' in params and params['offset'] < 0:  # noqa: E501
            raise ValueError("Invalid value for parameter `offset` when calling `list_events`, must be a value greater than or equal to `0`")  # noqa: E501
        if 'max_items' in params and params['max_items'] > 100:  # noqa: E501
            raise ValueError("Invalid value for parameter `max_items` when calling `list_events`, must be a value less than or equal to `100`")  # noqa: E501
        if 'max_items' in params and params['max_items'] < 1:  # noqa: E501
            raise ValueError("Invalid value for parameter `max_items` when calling `list_events`, must be a value greater than or equal to `1`")  # noqa: E501
        if 'range_from' in params and params['range_from'] < 0:  # noqa: E501
            raise ValueError("Invalid value for parameter `range_from` when calling `list_events`, must be a value greater than or equal to `0`")  # noqa: E501
        if 'range_to' in params and params['range_to'] < 0:  # noqa: E501
            raise ValueError("Invalid value for parameter `range_to` when calling `list_events`, must be a value greater than or equal to `0`")  # noqa: E501
        collection_formats = {}

        path_params = {}

        query_params = []
        if 'environment_id' in params:
            query_params.append(('environment_id', params['environment_id']))  # noqa: E501
        if 'offset' in params:
            query_params.append(('offset', params['offset']))  # noqa: E501
        if 'max_items' in params:
            query_params.append(('max_items', params['max_items']))  # noqa: E501
        if 'range_from' in params:
            query_params.append(('range_from', params['range_from']))  # noqa: E501
        if 'range_to' in params:
            query_params.append(('range_to', params['range_to']))  # noqa: E501
        if 'event_type' in params:
            query_params.append(('event_type', params['event_type']))  # noqa: E501
            collection_formats['event_type'] = 'multi'  # noqa: E501
        if 'change' in params:
            query_params.append(('change', params['change']))  # noqa: E501
            collection_formats['change'] = 'multi'  # noqa: E501
        if 'remediated' in params:
            query_params.append(('remediated', params['remediated']))  # noqa: E501
            collection_formats['remediated'] = 'multi'  # noqa: E501
        if 'resource_type' in params:
            query_params.append(('resource_type', params['resource_type']))  # noqa: E501
            collection_formats['resource_type'] = 'multi'  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/events', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Events',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
