# coding: utf-8

"""
    Fugue API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 0.0.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from swagger_client.api_client import ApiClient


class MetadataApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def create_policy(self, provider, input, **kwargs):  # noqa: E501
        """Returns the permissions required to survey and remediate resources.  # noqa: E501

        Returns the permissions required to survey and remediate resources.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.create_policy(provider, input, async=True)
        >>> result = thread.get()

        :param async bool
        :param str provider: Name of the cloud provider. (required)
        :param CreatePolicyInput input: List of resource types to be able to survey and remediate. (required)
        :return: Permissions
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.create_policy_with_http_info(provider, input, **kwargs)  # noqa: E501
        else:
            (data) = self.create_policy_with_http_info(provider, input, **kwargs)  # noqa: E501
            return data

    def create_policy_with_http_info(self, provider, input, **kwargs):  # noqa: E501
        """Returns the permissions required to survey and remediate resources.  # noqa: E501

        Returns the permissions required to survey and remediate resources.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.create_policy_with_http_info(provider, input, async=True)
        >>> result = thread.get()

        :param async bool
        :param str provider: Name of the cloud provider. (required)
        :param CreatePolicyInput input: List of resource types to be able to survey and remediate. (required)
        :return: Permissions
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['provider', 'input']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_policy" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'provider' is set
        if ('provider' not in params or
                params['provider'] is None):
            raise ValueError("Missing the required parameter `provider` when calling `create_policy`")  # noqa: E501
        # verify the required parameter 'input' is set
        if ('input' not in params or
                params['input'] is None):
            raise ValueError("Missing the required parameter `input` when calling `create_policy`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'provider' in params:
            path_params['provider'] = params['provider']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'input' in params:
            body_params = params['input']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/metadata/{provider}/permissions', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='Permissions',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_resource_types(self, provider, **kwargs):  # noqa: E501
        """Lists the resource types supported by Fugue.  # noqa: E501

        Lists the resource types supported by Fugue.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_resource_types(provider, async=True)
        >>> result = thread.get()

        :param async bool
        :param str provider: Name of the cloud provider. (required)
        :param str region: The AWS region for which to return resource types.  Required if provider is aws or aws_govcloud.
        :param bool beta_resources: Indicates whether resource types in beta will be returned.
        :return: ResourceTypeMetadata
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.get_resource_types_with_http_info(provider, **kwargs)  # noqa: E501
        else:
            (data) = self.get_resource_types_with_http_info(provider, **kwargs)  # noqa: E501
            return data

    def get_resource_types_with_http_info(self, provider, **kwargs):  # noqa: E501
        """Lists the resource types supported by Fugue.  # noqa: E501

        Lists the resource types supported by Fugue.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_resource_types_with_http_info(provider, async=True)
        >>> result = thread.get()

        :param async bool
        :param str provider: Name of the cloud provider. (required)
        :param str region: The AWS region for which to return resource types.  Required if provider is aws or aws_govcloud.
        :param bool beta_resources: Indicates whether resource types in beta will be returned.
        :return: ResourceTypeMetadata
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['provider', 'region', 'beta_resources']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_resource_types" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'provider' is set
        if ('provider' not in params or
                params['provider'] is None):
            raise ValueError("Missing the required parameter `provider` when calling `get_resource_types`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'provider' in params:
            path_params['provider'] = params['provider']  # noqa: E501

        query_params = []
        if 'region' in params:
            query_params.append(('region', params['region']))  # noqa: E501
        if 'beta_resources' in params:
            query_params.append(('beta_resources', params['beta_resources']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/metadata/{provider}/resource_types', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ResourceTypeMetadata',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_swagger(self, **kwargs):  # noqa: E501
        """Returns the OpenAPI 2.0 specification for this API.  # noqa: E501

        Returns the OpenAPI 2.0 specification for this API.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_swagger(async=True)
        >>> result = thread.get()

        :param async bool
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.get_swagger_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.get_swagger_with_http_info(**kwargs)  # noqa: E501
            return data

    def get_swagger_with_http_info(self, **kwargs):  # noqa: E501
        """Returns the OpenAPI 2.0 specification for this API.  # noqa: E501

        Returns the OpenAPI 2.0 specification for this API.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_swagger_with_http_info(async=True)
        >>> result = thread.get()

        :param async bool
        :return: object
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_swagger" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json', 'application/yaml'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/swagger', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='object',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_swagger_ui(self, **kwargs):  # noqa: E501
        """Returns a friendly user interface for the OpenAPI 2.0 specification for this API.  # noqa: E501

        Returns a friendly user interface for the OpenAPI 2.0 specification for this API.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_swagger_ui(async=True)
        >>> result = thread.get()

        :param async bool
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.get_swagger_ui_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.get_swagger_ui_with_http_info(**kwargs)  # noqa: E501
            return data

    def get_swagger_ui_with_http_info(self, **kwargs):  # noqa: E501
        """Returns a friendly user interface for the OpenAPI 2.0 specification for this API.  # noqa: E501

        Returns a friendly user interface for the OpenAPI 2.0 specification for this API.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_swagger_ui_with_http_info(async=True)
        >>> result = thread.get()

        :param async bool
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_swagger_ui" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['text/html'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = []  # noqa: E501

        return self.api_client.call_api(
            '/swagger/ui', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
