# coding: utf-8

"""
    Fugue API

    No description provided (generated by Swagger Codegen https://github.com/swagger-api/swagger-codegen)  # noqa: E501

    OpenAPI spec version: 0.0.1
    
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from swagger_client.api_client import ApiClient


class CustomRulesApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def create_custom_rule(self, rule, **kwargs):  # noqa: E501
        """Create a new custom rule.  # noqa: E501

        Create a new custom rule.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.create_custom_rule(rule, async=True)
        >>> result = thread.get()

        :param async bool
        :param CreateCustomRuleInput rule: Configuration options for the new custom rule. (required)
        :return: CustomRuleWithErrors
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.create_custom_rule_with_http_info(rule, **kwargs)  # noqa: E501
        else:
            (data) = self.create_custom_rule_with_http_info(rule, **kwargs)  # noqa: E501
            return data

    def create_custom_rule_with_http_info(self, rule, **kwargs):  # noqa: E501
        """Create a new custom rule.  # noqa: E501

        Create a new custom rule.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.create_custom_rule_with_http_info(rule, async=True)
        >>> result = thread.get()

        :param async bool
        :param CreateCustomRuleInput rule: Configuration options for the new custom rule. (required)
        :return: CustomRuleWithErrors
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['rule']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_custom_rule" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'rule' is set
        if ('rule' not in params or
                params['rule'] is None):
            raise ValueError("Missing the required parameter `rule` when calling `create_custom_rule`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'rule' in params:
            body_params = params['rule']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/rules', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='CustomRuleWithErrors',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_custom_rule(self, rule_id, **kwargs):  # noqa: E501
        """Delete a custom rule.  # noqa: E501

        Delete a specified custom rule.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.delete_custom_rule(rule_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str rule_id: The id of the rule to delete. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.delete_custom_rule_with_http_info(rule_id, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_custom_rule_with_http_info(rule_id, **kwargs)  # noqa: E501
            return data

    def delete_custom_rule_with_http_info(self, rule_id, **kwargs):  # noqa: E501
        """Delete a custom rule.  # noqa: E501

        Delete a specified custom rule.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.delete_custom_rule_with_http_info(rule_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str rule_id: The id of the rule to delete. (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['rule_id']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_custom_rule" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'rule_id' is set
        if ('rule_id' not in params or
                params['rule_id'] is None):
            raise ValueError("Missing the required parameter `rule_id` when calling `delete_custom_rule`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'rule_id' in params:
            path_params['rule_id'] = params['rule_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/rules/{rule_id}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_custom_rule(self, rule_id, **kwargs):  # noqa: E501
        """Get details on a single custom rule.  # noqa: E501

        Get details on a single custom rule.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_custom_rule(rule_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str rule_id: The ID of the Rule to get. (required)
        :return: CustomRule
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.get_custom_rule_with_http_info(rule_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_custom_rule_with_http_info(rule_id, **kwargs)  # noqa: E501
            return data

    def get_custom_rule_with_http_info(self, rule_id, **kwargs):  # noqa: E501
        """Get details on a single custom rule.  # noqa: E501

        Get details on a single custom rule.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_custom_rule_with_http_info(rule_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str rule_id: The ID of the Rule to get. (required)
        :return: CustomRule
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['rule_id']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_custom_rule" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'rule_id' is set
        if ('rule_id' not in params or
                params['rule_id'] is None):
            raise ValueError("Missing the required parameter `rule_id` when calling `get_custom_rule`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'rule_id' in params:
            path_params['rule_id'] = params['rule_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/rules/{rule_id}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='CustomRule',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def list_custom_rules(self, **kwargs):  # noqa: E501
        """List custom rules.  # noqa: E501

        Return a list of custom rules.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.list_custom_rules(async=True)
        >>> result = thread.get()

        :param async bool
        :param int offset: Number of items to skip before returning. This parameter is used when the number of items spans multiple pages.
        :param int max_items: Maximum number of items to return.
        :return: CustomRules
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.list_custom_rules_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.list_custom_rules_with_http_info(**kwargs)  # noqa: E501
            return data

    def list_custom_rules_with_http_info(self, **kwargs):  # noqa: E501
        """List custom rules.  # noqa: E501

        Return a list of custom rules.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.list_custom_rules_with_http_info(async=True)
        >>> result = thread.get()

        :param async bool
        :param int offset: Number of items to skip before returning. This parameter is used when the number of items spans multiple pages.
        :param int max_items: Maximum number of items to return.
        :return: CustomRules
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['offset', 'max_items']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method list_custom_rules" % key
                )
            params[key] = val
        del params['kwargs']

        if 'offset' in params and params['offset'] < 0:  # noqa: E501
            raise ValueError("Invalid value for parameter `offset` when calling `list_custom_rules`, must be a value greater than or equal to `0`")  # noqa: E501
        if 'max_items' in params and params['max_items'] > 100:  # noqa: E501
            raise ValueError("Invalid value for parameter `max_items` when calling `list_custom_rules`, must be a value less than or equal to `100`")  # noqa: E501
        if 'max_items' in params and params['max_items'] < 1:  # noqa: E501
            raise ValueError("Invalid value for parameter `max_items` when calling `list_custom_rules`, must be a value greater than or equal to `1`")  # noqa: E501
        collection_formats = {}

        path_params = {}

        query_params = []
        if 'offset' in params:
            query_params.append(('offset', params['offset']))  # noqa: E501
        if 'max_items' in params:
            query_params.append(('max_items', params['max_items']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/rules', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='CustomRules',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def test_custom_rule(self, rule, **kwargs):  # noqa: E501
        """Test a custom rule.  # noqa: E501

        Test a custom rule using state from an scan.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.test_custom_rule(rule, async=True)
        >>> result = thread.get()

        :param async bool
        :param TestCustomRuleInput rule: Information about custom rule to be tested. (required)
        :return: TestCustomRuleOutput
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.test_custom_rule_with_http_info(rule, **kwargs)  # noqa: E501
        else:
            (data) = self.test_custom_rule_with_http_info(rule, **kwargs)  # noqa: E501
            return data

    def test_custom_rule_with_http_info(self, rule, **kwargs):  # noqa: E501
        """Test a custom rule.  # noqa: E501

        Test a custom rule using state from an scan.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.test_custom_rule_with_http_info(rule, async=True)
        >>> result = thread.get()

        :param async bool
        :param TestCustomRuleInput rule: Information about custom rule to be tested. (required)
        :return: TestCustomRuleOutput
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['rule']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method test_custom_rule" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'rule' is set
        if ('rule' not in params or
                params['rule'] is None):
            raise ValueError("Missing the required parameter `rule` when calling `test_custom_rule`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'rule' in params:
            body_params = params['rule']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/rules/test', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='TestCustomRuleOutput',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def test_custom_rule_input(self, scan_id, **kwargs):  # noqa: E501
        """Get the input for a custom rule test.  # noqa: E501

        Get the input against which a custom rule would be tested.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.test_custom_rule_input(scan_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str scan_id: Scan of which we should get the custom rule test input. (required)
        :return: TestCustomRuleInputScan
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.test_custom_rule_input_with_http_info(scan_id, **kwargs)  # noqa: E501
        else:
            (data) = self.test_custom_rule_input_with_http_info(scan_id, **kwargs)  # noqa: E501
            return data

    def test_custom_rule_input_with_http_info(self, scan_id, **kwargs):  # noqa: E501
        """Get the input for a custom rule test.  # noqa: E501

        Get the input against which a custom rule would be tested.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.test_custom_rule_input_with_http_info(scan_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str scan_id: Scan of which we should get the custom rule test input. (required)
        :return: TestCustomRuleInputScan
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['scan_id']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method test_custom_rule_input" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'scan_id' is set
        if ('scan_id' not in params or
                params['scan_id'] is None):
            raise ValueError("Missing the required parameter `scan_id` when calling `test_custom_rule_input`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'scan_id' in params:
            query_params.append(('scan_id', params['scan_id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/rules/test/input', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='TestCustomRuleInputScan',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def update_custom_rule(self, rule_id, rule, **kwargs):  # noqa: E501
        """Update custom rule.  # noqa: E501

        Update configuration of a custom rule.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.update_custom_rule(rule_id, rule, async=True)
        >>> result = thread.get()

        :param async bool
        :param str rule_id: The id of the rule to update. (required)
        :param UpdateCustomRuleInput rule: New configuration options for the custom rule. (required)
        :return: CustomRuleWithErrors
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.update_custom_rule_with_http_info(rule_id, rule, **kwargs)  # noqa: E501
        else:
            (data) = self.update_custom_rule_with_http_info(rule_id, rule, **kwargs)  # noqa: E501
            return data

    def update_custom_rule_with_http_info(self, rule_id, rule, **kwargs):  # noqa: E501
        """Update custom rule.  # noqa: E501

        Update configuration of a custom rule.   # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.update_custom_rule_with_http_info(rule_id, rule, async=True)
        >>> result = thread.get()

        :param async bool
        :param str rule_id: The id of the rule to update. (required)
        :param UpdateCustomRuleInput rule: New configuration options for the custom rule. (required)
        :return: CustomRuleWithErrors
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['rule_id', 'rule']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_custom_rule" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'rule_id' is set
        if ('rule_id' not in params or
                params['rule_id'] is None):
            raise ValueError("Missing the required parameter `rule_id` when calling `update_custom_rule`")  # noqa: E501
        # verify the required parameter 'rule' is set
        if ('rule' not in params or
                params['rule'] is None):
            raise ValueError("Missing the required parameter `rule` when calling `update_custom_rule`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'rule_id' in params:
            path_params['rule_id'] = params['rule_id']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'rule' in params:
            body_params = params['rule']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['basicAuth']  # noqa: E501

        return self.api_client.call_api(
            '/rules/{rule_id}', 'PATCH',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='CustomRuleWithErrors',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
